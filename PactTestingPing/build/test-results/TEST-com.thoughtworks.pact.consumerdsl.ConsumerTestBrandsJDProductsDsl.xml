<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="com.thoughtworks.pact.consumerdsl.ConsumerTestBrandsJDProductsDsl" tests="1" skipped="0" failures="1" errors="0" timestamp="2016-05-22T02:12:45" hostname="CNpingzhu.local" time="0.199">
  <properties/>
  <testcase name="runTest" classname="com.thoughtworks.pact.consumerdsl.ConsumerTestBrandsJDProductsDsl" time="0.199">
    <failure message="java.lang.IllegalArgumentException: requirement failed: The following merge conflicts occurred: &#10;MergeConflict(Stream((Interaction: a_request_for_jd_products&#10;&#9;in state test_state&#10;request:&#10;&#9;method: GET&#10;&#9;path: /products&#10;&#9;query: null&#10;&#9;headers: [:]&#10;&#9;matchers: [:]&#10;&#9;body: au.com.dius.pact.model.OptionalBody(MISSING, null)&#10;&#10;response:&#10;&#9;status: 200 &#10;&#9;headers: [Content-Type:application/json] &#10;&#9;matchers: [:] &#10;&#9;body: au.com.dius.pact.model.OptionalBody(PRESENT, {&quot;products&quot;: [{&quot;brand&quot;: &quot;联想&quot;,&quot;model&quot;: &quot;小新Air&quot;,&quot;price&quot;: 6999}],&quot;provider&quot;: &quot;京东&quot;}),Interaction: a_request_for_jd_products&#10;&#9;in state test_state&#10;request:&#10;&#9;method: GET&#10;&#9;path: /products&#10;&#9;query: null&#10;&#9;headers: [:]&#10;&#9;matchers: [:]&#10;&#9;body: au.com.dius.pact.model.OptionalBody(MISSING, null)&#10;&#10;response:&#10;&#9;status: 200 &#10;&#9;headers: [Content-Type:application/json] &#10;&#9;matchers: [$.body.products[*].price:[match:type], $.body.provider:[regex:京东\d*], $.body.products[*].model:[regex:小新\w*], $.body.products[*].brand:[match:type], $.body.products:[min:1, match:type]] &#10;&#9;body: au.com.dius.pact.model.OptionalBody(PRESENT, {&quot;provider&quot;:&quot;京东&quot;,&quot;products&quot;:[{&quot;price&quot;:133476249,&quot;model&quot;:&quot;小新&quot;,&quot;brand&quot;:&quot;utRagwDJwFeoJYZcbWKZ&quot;}]})), ?))&#10; - MergeConflict(Stream((Interaction: a_request_for_Brands&#10;&#9;in state test_state&#10;request:&#10;&#9;method: GET&#10;&#9;path: /api/brand=神舟&#10;&#9;query: null&#10;&#9;headers: [:]&#10;&#9;matchers: [:]&#10;&#9;body: au.com.dius.pact.model.OptionalBody(MISSING, null)&#10;&#10;response:&#10;&#9;status: 200 &#10;&#9;headers: [Content-Type:text/plain;charset=UTF-8] &#10;&#9;matchers: [:] &#10;&#9;body: au.com.dius.pact.model.OptionalBody(PRESENT, {&quot;Data&quot;:[{&quot;provider&quot;: &quot;京东&quot;,&quot;brand&quot;: &quot;神舟&quot;,&quot;model&quot;: &quot; 战神K610D-i7 D2&quot;,&quot;price&quot;: 3469.0},{&quot;provider&quot;: &quot;淘宝&quot;,&quot;brand&quot;: &quot;神舟&quot;,&quot;model&quot;: &quot;战神 K650D-I5 D2&quot;,&quot;price&quot;: 3076.0}]}),Interaction: a_request_for_Brands&#10;&#9;in state test_state&#10;request:&#10;&#9;method: GET&#10;&#9;path: /api/brand=神舟&#10;&#9;query: null&#10;&#9;headers: [:]&#10;&#9;matchers: [:]&#10;&#9;body: au.com.dius.pact.model.OptionalBody(MISSING, null)&#10;&#10;response:&#10;&#9;status: 200 &#10;&#9;headers: [Content-Type:text/plain;charset=UTF-8] &#10;&#9;matchers: [$.body.Data[*].brand:[match:type], $.body.Data[*].model:[regex:小新\w*], $.body.Data:[min:2, match:type], $.body.Data[*].provider:[match:type], $.body.Data[*].price:[match:type]] &#10;&#9;body: au.com.dius.pact.model.OptionalBody(PRESENT, {&quot;Data&quot;:[{&quot;provider&quot;:&quot;gchKMuiWutRfjFGyUgDD&quot;,&quot;price&quot;:423250057,&quot;model&quot;:&quot;小新&quot;,&quot;brand&quot;:&quot;rJJoSJbODXFtdpBvcOUi&quot;},{&quot;provider&quot;:&quot;gchKMuiWutRfjFGyUgDD&quot;,&quot;price&quot;:423250057,&quot;model&quot;:&quot;小新&quot;,&quot;brand&quot;:&quot;rJJoSJbODXFtdpBvcOUi&quot;}]})), ?))" type="java.lang.IllegalArgumentException">java.lang.IllegalArgumentException: requirement failed: The following merge conflicts occurred: 
MergeConflict(Stream((Interaction: a_request_for_jd_products
	in state test_state
request:
	method: GET
	path: /products
	query: null
	headers: [:]
	matchers: [:]
	body: au.com.dius.pact.model.OptionalBody(MISSING, null)

response:
	status: 200 
	headers: [Content-Type:application/json] 
	matchers: [:] 
	body: au.com.dius.pact.model.OptionalBody(PRESENT, {&quot;products&quot;: [{&quot;brand&quot;: &quot;联想&quot;,&quot;model&quot;: &quot;小新Air&quot;,&quot;price&quot;: 6999}],&quot;provider&quot;: &quot;京东&quot;}),Interaction: a_request_for_jd_products
	in state test_state
request:
	method: GET
	path: /products
	query: null
	headers: [:]
	matchers: [:]
	body: au.com.dius.pact.model.OptionalBody(MISSING, null)

response:
	status: 200 
	headers: [Content-Type:application/json] 
	matchers: [$.body.products[*].price:[match:type], $.body.provider:[regex:京东\d*], $.body.products[*].model:[regex:小新\w*], $.body.products[*].brand:[match:type], $.body.products:[min:1, match:type]] 
	body: au.com.dius.pact.model.OptionalBody(PRESENT, {&quot;provider&quot;:&quot;京东&quot;,&quot;products&quot;:[{&quot;price&quot;:133476249,&quot;model&quot;:&quot;小新&quot;,&quot;brand&quot;:&quot;utRagwDJwFeoJYZcbWKZ&quot;}]})), ?))
 - MergeConflict(Stream((Interaction: a_request_for_Brands
	in state test_state
request:
	method: GET
	path: /api/brand=神舟
	query: null
	headers: [:]
	matchers: [:]
	body: au.com.dius.pact.model.OptionalBody(MISSING, null)

response:
	status: 200 
	headers: [Content-Type:text/plain;charset=UTF-8] 
	matchers: [:] 
	body: au.com.dius.pact.model.OptionalBody(PRESENT, {&quot;Data&quot;:[{&quot;provider&quot;: &quot;京东&quot;,&quot;brand&quot;: &quot;神舟&quot;,&quot;model&quot;: &quot; 战神K610D-i7 D2&quot;,&quot;price&quot;: 3469.0},{&quot;provider&quot;: &quot;淘宝&quot;,&quot;brand&quot;: &quot;神舟&quot;,&quot;model&quot;: &quot;战神 K650D-I5 D2&quot;,&quot;price&quot;: 3076.0}]}),Interaction: a_request_for_Brands
	in state test_state
request:
	method: GET
	path: /api/brand=神舟
	query: null
	headers: [:]
	matchers: [:]
	body: au.com.dius.pact.model.OptionalBody(MISSING, null)

response:
	status: 200 
	headers: [Content-Type:text/plain;charset=UTF-8] 
	matchers: [$.body.Data[*].brand:[match:type], $.body.Data[*].model:[regex:小新\w*], $.body.Data:[min:2, match:type], $.body.Data[*].provider:[match:type], $.body.Data[*].price:[match:type]] 
	body: au.com.dius.pact.model.OptionalBody(PRESENT, {&quot;Data&quot;:[{&quot;provider&quot;:&quot;gchKMuiWutRfjFGyUgDD&quot;,&quot;price&quot;:423250057,&quot;model&quot;:&quot;小新&quot;,&quot;brand&quot;:&quot;rJJoSJbODXFtdpBvcOUi&quot;},{&quot;provider&quot;:&quot;gchKMuiWutRfjFGyUgDD&quot;,&quot;price&quot;:423250057,&quot;model&quot;:&quot;小新&quot;,&quot;brand&quot;:&quot;rJJoSJbODXFtdpBvcOUi&quot;}]})), ?))
	at scala.Predef$.require(Predef.scala:219)
	at au.com.dius.pact.consumer.PactGenerator.writeAllToFile(PactGenerator.scala:69)
	at au.com.dius.pact.consumer.ConsumerPactRunner$$anonfun$writeIfMatching$2.apply(ConsumerPactRunner.scala:13)
	at au.com.dius.pact.consumer.ConsumerPactRunner$$anonfun$writeIfMatching$2.apply(ConsumerPactRunner.scala:12)
	at scala.util.Success.foreach(Try.scala:236)
	at scala.util.Try$WithFilter.foreach(Try.scala:140)
	at au.com.dius.pact.consumer.ConsumerPactRunner$.writeIfMatching(ConsumerPactRunner.scala:12)
	at au.com.dius.pact.consumer.ConsumerPactRunner$.writeIfMatching(ConsumerPactRunner.scala:9)
	at au.com.dius.pact.consumer.ConsumerPactRunner$$anonfun$runAndWritePact$2.apply(ConsumerPactRunner.scala:34)
	at au.com.dius.pact.consumer.ConsumerPactRunner$$anonfun$runAndWritePact$2.apply(ConsumerPactRunner.scala:34)
	at scala.Option.fold(Option.scala:158)
	at au.com.dius.pact.consumer.ConsumerPactRunner.runAndWritePact(ConsumerPactRunner.scala:34)
	at au.com.dius.pact.model.PactFragment.duringConsumerSpec(PactFragment.scala:13)
	at au.com.dius.pact.model.PactFragment.runConsumer(PactFragment.scala:21)
	at au.com.dius.pact.consumer.PactProviderRule.runPactTest(PactProviderRule.java:189)
	at au.com.dius.pact.consumer.PactProviderRule.access$100(PactProviderRule.java:26)
	at au.com.dius.pact.consumer.PactProviderRule$1.evaluate(PactProviderRule.java:117)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.runTestClass(JUnitTestClassExecuter.java:105)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.execute(JUnitTestClassExecuter.java:56)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassProcessor.processTestClass(JUnitTestClassProcessor.java:64)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:50)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.messaging.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
	at org.gradle.messaging.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:106)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.messaging.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:360)
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:54)
	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:40)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
</failure>
  </testcase>
  <system-out><![CDATA[wwwwwwwwwwww
10:12:45.701 [Test worker] DEBUG o.s.web.client.RestTemplate - Created GET request for "http://localhost:6003/products"
10:12:45.702 [Test worker] DEBUG o.s.web.client.RestTemplate - Setting request Accept header to [application/json, application/*+json]
10:12:45.708 [nioEventLoopGroup-19-1] DEBUG a.c.d.p.c.UnfilteredMockProvider - Received request: 	method: GET
	path: /products
	query: [:]
	headers: [Connection:keep-alive, Content-Length:0, Accept:application/json, application/*+json, User-Agent:Java/1.8.0_66, Host:localhost:6003]
	matchers: null
	body: au.com.dius.pact.model.OptionalBody(EMPTY, )
10:12:45.710 [nioEventLoopGroup-19-1] DEBUG a.c.dius.pact.model.RequestMatching$ - comparing to expected request: 
	method: GET
	path: /products
	query: null
	headers: [:]
	matchers: [:]
	body: au.com.dius.pact.model.OptionalBody(MISSING, null)
10:12:45.715 [nioEventLoopGroup-19-1] DEBUG au.com.dius.pact.model.Matching$ - No matcher for text/plain, using equality
10:12:45.715 [nioEventLoopGroup-19-1] DEBUG a.c.dius.pact.model.RequestMatching$ - Request mismatch: List()
10:12:45.716 [nioEventLoopGroup-19-1] DEBUG a.c.d.p.c.UnfilteredMockProvider - Generating response: 	status: 200 
	headers: [Content-Type:application/json] 
	matchers: [$.body.products[*].price:[match:type], $.body.provider:[regex:京东\d*], $.body.products[*].model:[regex:小新\w*], $.body.products[*].brand:[match:type], $.body.products:[min:1, match:type]] 
	body: au.com.dius.pact.model.OptionalBody(PRESENT, {"provider":"京东","products":[{"price":133476249,"model":"小新","brand":"utRagwDJwFeoJYZcbWKZ"}]})
10:12:45.717 [Test worker] DEBUG o.s.web.client.RestTemplate - GET request for "http://localhost:6003/products" resulted in 200 (OK)
10:12:45.718 [Test worker] DEBUG o.s.web.client.RestTemplate - Reading [class com.fasterxml.jackson.databind.JsonNode] as "application/json" using [org.springframework.http.converter.json.MappingJackson2HttpMessageConverter@4558b354]
kkkkkkkkkkkkkk
{"provider":"京东","products":[{"price":133476249,"model":"小新","brand":"utRagwDJwFeoJYZcbWKZ"}]}
class com.fasterxml.jackson.databind.node.ArrayNode
"京东"
xxxxxxxxxxxxx
endendendendendendendendendend
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
